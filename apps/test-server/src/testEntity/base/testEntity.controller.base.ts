/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestEntityService } from "../testEntity.service";
import { TestEntityCreateInput } from "./TestEntityCreateInput";
import { TestEntity } from "./TestEntity";
import { TestEntityFindManyArgs } from "./TestEntityFindManyArgs";
import { TestEntityWhereUniqueInput } from "./TestEntityWhereUniqueInput";
import { TestEntityUpdateInput } from "./TestEntityUpdateInput";

export class TestEntityControllerBase {
  constructor(protected readonly service: TestEntityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestEntity })
  async createTestEntity(
    @common.Body() data: TestEntityCreateInput
  ): Promise<TestEntity> {
    return await this.service.createTestEntity({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestEntity] })
  @ApiNestedQuery(TestEntityFindManyArgs)
  async testEntities(@common.Req() request: Request): Promise<TestEntity[]> {
    const args = plainToClass(TestEntityFindManyArgs, request.query);
    return this.service.testEntities({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testEntity(
    @common.Param() params: TestEntityWhereUniqueInput
  ): Promise<TestEntity | null> {
    const result = await this.service.testEntity({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestEntity(
    @common.Param() params: TestEntityWhereUniqueInput,
    @common.Body() data: TestEntityUpdateInput
  ): Promise<TestEntity | null> {
    try {
      return await this.service.updateTestEntity({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestEntity(
    @common.Param() params: TestEntityWhereUniqueInput
  ): Promise<TestEntity | null> {
    try {
      return await this.service.deleteTestEntity({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TestEntity as PrismaTestEntity } from "@prisma/client";

export class TestEntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TestEntityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testEntity.count(args);
  }

  async testEntities(
    args: Prisma.TestEntityFindManyArgs
  ): Promise<PrismaTestEntity[]> {
    return this.prisma.testEntity.findMany(args);
  }
  async testEntity(
    args: Prisma.TestEntityFindUniqueArgs
  ): Promise<PrismaTestEntity | null> {
    return this.prisma.testEntity.findUnique(args);
  }
  async createTestEntity(
    args: Prisma.TestEntityCreateArgs
  ): Promise<PrismaTestEntity> {
    return this.prisma.testEntity.create(args);
  }
  async updateTestEntity(
    args: Prisma.TestEntityUpdateArgs
  ): Promise<PrismaTestEntity> {
    return this.prisma.testEntity.update(args);
  }
  async deleteTestEntity(
    args: Prisma.TestEntityDeleteArgs
  ): Promise<PrismaTestEntity> {
    return this.prisma.testEntity.delete(args);
  }
}
